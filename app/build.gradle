plugins {
  id 'java'
  id 'idea'
  id 'application'
  id 'io.spring.dependency-management'
  id 'org.springframework.boot'
  id 'jacoco'
  id 'com.gorylenko.gradle-git-properties'
  id 'com.diffplug.spotless'
}

def appVersion = getAppVersion()
group = 'org.onap'
version = appVersion

springBoot {
  buildInfo {
    properties {
      artifact = "onap-portal-ng-preferences"
      version = appVersion
      group = "org.onap.portalng"
      name = "Portal-ng user preferences service"
    }
  }
}

application {
  mainClass = 'org.onap.portalng.preferences.PreferencesApplication'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven {
    url = "https://plugins.gradle.org/m2/"
  }
}

ext {
  problemVersion = '0.27.1'
  swaggerAnnotationsVersion = '2.2.34'
}

dependencies {
  implementation project(':openapi')
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation "org.zalando:problem:$problemVersion"

  implementation "org.liquibase:liquibase-core"
  implementation 'org.postgresql:postgresql'

  implementation 'io.micrometer:micrometer-tracing'
  implementation 'io.micrometer:micrometer-tracing-bridge-otel'
  implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
  implementation 'io.micrometer:micrometer-registry-prometheus'

  compileOnly 'org.projectlombok:lombok'
  compileOnly "io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion"

  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'io.projectreactor:reactor-test'
  testImplementation "org.testcontainers:postgresql"
  testCompileOnly 'org.projectlombok:lombok'
  testCompileOnly "io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion"
  testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
  useJUnitPlatform()
  finalizedBy(jacocoTestReport)
}

jacocoTestReport {
  reports {
    xml.required = true
  }
}

// avoid generating X.X.X-plain.jar
jar {
  enabled = false
}

def String getAppVersion() {
  Properties versionProperties = getVersionProperties()
  String major = versionProperties.getProperty('major')
  String minor = versionProperties.getProperty('minor')
  String patch = versionProperties.getProperty('patch')
  return major + '.' + minor + '.' + patch
}

def Properties getVersionProperties() {
  def versionProperties = new Properties()
  rootProject.file('version.properties').withInputStream {
    versionProperties.load(it)
  }
  return versionProperties
}

gitProperties {
  // if .git directory is on the same level as the root project
  dotGitDirectory = project.rootProject.layout.projectDirectory.dir(".git")
}

spotless {
  java {
    googleJavaFormat()
  }
}
